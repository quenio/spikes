#!/usr/bin/env scala
!#

import java.util._
import java.text._

case class ReportColumn[ReportItemType, ValueType](
  header: String, 
  value: ReportItemType => ValueType
)(
  implicit val format: ValueType => String
) 
{
  def formattedValue(item: ReportItemType) = format(value(item))
}

object Formats {
  implicit def USDate(date: Date) = new SimpleDateFormat("MM/dd/yyyy").format(date)
  implicit def Amount(amount: BigDecimal) = new DecimalFormat("0.00").format(amount)
}

case class ReportSpec[ReportItemType](columns: ReportColumn[ReportItemType,_]*) 
{
  def headers = columns.map(_.header)
  def line(item: ReportItemType) = columns.map(_.formattedValue(item))
}
  
abstract class CSVReport[ReportItemType](spec: ReportSpec[ReportItemType]) 
{
  def csv(column: String, line: String) = column + "," + line
  
  def header = spec.headers.reduceRight(csv)
  
  def line(item: ReportItemType) = spec.line(item).reduceRight(csv) 
  
  def print(items: ReportItemType*) 
  {
    Predef.println(header)
    items.foreach(item => Predef.println(line(item))) 
  }
}

import Formats._

class Transaction(val date: Date, val amount: BigDecimal)

object MyReport extends CSVReport[Transaction] (
  ReportSpec
  (
    ReportColumn("Date", _.date),
    ReportColumn("Amount", _.amount)
  )
)

MyReport.print(
  new Transaction(date = new Date(), amount = BigDecimal("1234.56")),
  new Transaction(date = new Date(), amount = BigDecimal("4545.23"))
)
